// Generated by Xata Codegen 0.23.2. Please do not edit.
import {
	buildClient,
	type BaseClientOptions,
	type SchemaInference,
	type XataRecord,
} from "@xata.io/client";

const tables = [
	{ name: "test", columns: [{ name: "ww", type: "multiple" }] },
	{ name: "transactions", columns: [] },
	{
		name: "address",
		columns: [{ name: "count", type: "int", notNull: true, defaultValue: "0" }],
	},
	{
		name: "transaction",
		columns: [{ name: "count", type: "int", notNull: true, defaultValue: "0" }],
	},
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Test = InferredTypes["test"];
export type TestRecord = Test & XataRecord;

export type Transactions = InferredTypes["transactions"];
export type TransactionsRecord = Transactions & XataRecord;

export type Address = InferredTypes["address"];
export type AddressRecord = Address & XataRecord;

export type Transaction = InferredTypes["transaction"];
export type TransactionRecord = Transaction & XataRecord;

export type DatabaseSchema = {
	test: TestRecord;
	transactions: TransactionsRecord;
	address: AddressRecord;
	transaction: TransactionRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
	databaseURL:
		"https://Rostislav-Dascal-s-workspace-jejqcv.eu-west-1.xata.sh/db/test",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
	constructor(options?: BaseClientOptions) {
		super({ ...defaultOptions, ...options }, tables);
	}
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
	if (instance) return instance;

	instance = new XataClient();
	return instance;
};
